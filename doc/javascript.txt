The syncable framework enables an efficient and maintainable style of
data-centric communication between javascript browser applications and
an application server.  The centerpiece of the framework is transparent
object replication.  For many applications, especially rich clients,
sync is superior to RPC style connections.

Users of the javascript framework typically use a subscribe api to
request javascript objects that resident in the service.  Changes to
syncable objects are then transparently and asynchronously replicated
in both directions: from browser to server and from server to browser.
Here's what it looks like:

  // open a two way sync to the server
  var connection = $sync.connect("http://foo.com/json-sync");

  // subscribe to a collection of objects representing yellow sticky notes
  connection.subscribe("/elements/notes", function(notes) {
      // This function is called once when the notes collection arrives
      notesViewer(notes); });

  // make arbitrary changes to the notes (use field mutate func: .x_() )
  notes.each(function(note) {
      note.position.x_(note.position.x + 5); });

  // save all changes to the service
  connection.commit();


A viewer will typically also watch for changes pushed from the server:
  
  notesViewer = function(notes) {
      var model = notes; 

      // re-render if the notes collection or any note within it changes
      $sync.observe.watchDeep(model, function() {
        // called when the server pushes a change or when the client locally
        // modifies a note or the notes collection
        render(); }});
    

Advantages for the client over RPC.
* CRUD is nearly effortless: syncable data structures are transparently 
  persisted to the server.
* Reverse CRUD (server push) is nearly effortless.  Just watch() for changes.
* Clean api, fully asynchronous.
* The transfer protocol is more efficient: instead of sending all relevant 
  objects to an operation, only unchanged objects and unchanged fields don't 
  need to be sent.
* Atomic groups of changes allows for easier consistency management.

Disadvantages
* New API / implementation:  new code to trust, new api to learn.
* Legacy libraries don't typically support syncable data structures (although
  they don't typically support RPC either :-) )

Issues:
* Tighter coupling between client and server data structures can
  potentially complicate maintenance.  Not sure if this an issue in
  practice, but in any case the server can use internal apis to isolate
  syncable client data structures.
